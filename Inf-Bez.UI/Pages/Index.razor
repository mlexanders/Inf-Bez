@page "/"
@using InfBez.Ui.Services
@using Radzen
@using Microsoft.JSInterop
@using System.Text;
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@attribute [Authorize]


<PageTitle>Index</PageTitle>
<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <RadzenHtmlEditor Input=@(() => isChanged = true) @bind-Value=@content style="height: 300px;" UploadUrl="upload/image" />
        <RadzenCard>

            @if (isOpened)
            {
                <RadzenButton Disabled=@(!isChanged) Text="Save" Click=@SaveFile></RadzenButton>
            }
            else
            {
                <RadzenButton Text="Create" Click=@CreateFile></RadzenButton>
            }

            <div class="rz-fileupload">
                <div class="rz-fileupload-buttonbar"> 
                    <span class="rz-fileupload-choose rz-button rz-secondary" tabindex="0">
                        <InputFile class="rz-fileupload-choose rz-button rz-secondary" OnChange=@OnChangeFile></InputFile>
                        <span class="rz-button-text">Choose</span>
                    </span>
                </div>
            </div> 

        </RadzenCard>
    </RadzenColumn>
</RadzenRow>


@code {
    private string content = "<h1>Hello World!</h1>";
    private string? fileName;
    private bool isOpened = false;
    private bool isChanged = false;

    private string? _folder;
    private string Folder {
        get
        {
            if (string.IsNullOrEmpty(_folder))
            {
                _folder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
            }
            return _folder;
        }
    }

    private async Task SaveFile()
    {
        var filePath = Path.Combine(Folder, fileName ?? await GenerateFileName());

        using (FileStream fstream = new FileStream(filePath, FileMode.OpenOrCreate))
        {
            var buffer = Encoding.UTF8.GetBytes(content);
            await fstream.WriteAsync(buffer);
            fstream.Close();
        }
        isChanged = false;
    }

    private async Task CreateFile()
    {
        fileName = await GenerateFileName();
        var filePath = Path.Combine(Folder, fileName);

        using (FileStream fstream = new FileStream(filePath, FileMode.OpenOrCreate))
        {
            var buffer = Encoding.UTF8.GetBytes(content);
            await fstream.WriteAsync(buffer);
            fstream.Close();
        }
        isChanged = false;
        isOpened = true;

        content = "";
    }

    private async Task OnChangeFile(InputFileChangeEventArgs e)
    {
        fileName = e.File.Name;

        using (var fstream = e.File.OpenReadStream())
        {
            byte[] buffer = new byte[fstream.Length];
            await fstream.ReadAsync(buffer, 0, buffer.Length);
            content = Encoding.UTF8.GetString(buffer);
            fstream.Close();
        }
        isChanged = false;
        isOpened = true;
    }

    private async Task<string> GenerateFileName()
    {
        var user = await AuthService.GetCurrentUser();
        return $"{user.Name}-{DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss")}";
    }
}

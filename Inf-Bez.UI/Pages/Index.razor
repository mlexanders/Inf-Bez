@page "/"
@using InfBez.Ui.Services
@using Radzen
@using Microsoft.JSInterop
@using System.Text;
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@inject NotificationService NotificationService
@inject FileChecker FileChecker
@inject ArchiveManager ArchiveManager
@inject FileManager FileManager
@attribute [Authorize]


<PageTitle>Index</PageTitle>
<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <AuthorizeView Roles="User">
            <RadzenCard>
                <RadzenHtmlEditor Disabled=true Input=@(() => isChanged = true) @bind-Value=@content style="height: 300px;" UploadUrl="upload/image" />
            </RadzenCard>
            <div class="rz-fileupload">
                <div class="rz-fileupload-buttonbar">
                    <span class="rz-fileupload-choose rz-button rz-secondary" tabindex="0">
                        <InputFile class="rz-fileupload-choose rz-button rz-secondary" OnChange=@OnChangeFile></InputFile>
                        <span class="rz-button-text">Choose</span>
                    </span>
                </div>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Admin">
            <RadzenHtmlEditor Input=@(() => isChanged = true) @bind-Value=@content style="height: 300px;" UploadUrl="upload/image" />
            <RadzenCard>

                @if (isOpened)
                {
                    <RadzenButton Disabled=@(!isChanged) Text="Save" Click=@SaveFile></RadzenButton>
                }
                else
                {
                    <RadzenButton Text="Create" Click=@CreateFile></RadzenButton>
                }

                <div class="rz-fileupload">
                    <div class="rz-fileupload-buttonbar">
                        <span class="rz-fileupload-choose rz-button rz-secondary" tabindex="0">
                            <InputFile class="rz-fileupload-choose rz-button rz-secondary" OnChange=@OnChangeFile></InputFile>
                            <span class="rz-button-text">Choose</span>
                        </span>
                    </div>
                </div>

            </RadzenCard>
        </AuthorizeView>
        
    </RadzenColumn>
</RadzenRow>


@code {
    private string content = "";
    private bool isOpened = false;
    private bool isChanged = false;

    private async Task SaveFile()
    {
        try
        {
            await FileManager.Save(content);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }
        isChanged = false;
        NotificationService.Notify(saveFileMsg);
    }

    private async Task CreateFile()
    {
        try
        {
            await FileManager.CreateFile(content);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }
        isChanged = false;
        isOpened = true;

        NotificationService.Notify(createdFileMsg);
    }

    private async Task OnChangeFile(InputFileChangeEventArgs e)
    {
        try
        {
            content = await FileManager.Change(e.File.Name);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }

        isChanged = false;
        isOpened = true;
        NotificationService.Notify(openedFileMsg);
    }

    private async Task<string> GenerateFileName()
    {
        var user = await AuthService.GetCurrentUser();
        return $"{user.Name}-{DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss")}.html";
    }

    private void NotificateError(Exception ex)
    {
        NotificationService.Notify(
        new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Erorr",
                Detail = ex.Message,
                Duration = 7000
            });
    }

    private NotificationMessage saveFileMsg = new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
        Detail = $"File is saved",
        Duration = 5000
    };

    private NotificationMessage createdFileMsg = new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
        Detail = $"File was created",
        Duration = 5000
    };

    private NotificationMessage openedFileMsg = new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
        Detail = $"File was opened",
        Duration = 5000
    };
}

@page "/"
@using InfBez.Ui.Components
@using InfBez.Ui.Difinitions
@using InfBez.Ui.Services
@using Radzen
@using Microsoft.JSInterop
@using System.Text;
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@inject NotificationService NotificationService
@inject FileManager FileManager
@attribute [Authorize]


<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <AuthorizeView Roles="User">
            <RadzenCard>
                <RadzenHtmlEditor Disabled=true Input=@(() => isChanged = true) @bind-Value=@content style="height: 300px;" UploadUrl="upload/image" />
            </RadzenCard>
        </AuthorizeView>

        <AuthorizeView Roles="Admin">
             <RadzenCard>
                <RadzenHtmlEditor Input=@(() => isChanged = true) @bind-Value=@content style="height: 300px;" UploadUrl="upload/image" />
             </RadzenCard>
        </AuthorizeView>


        <RadzenStack class="m-2" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            @if (isOpened)
            {
                <RadzenButton Disabled=@(!isChanged) Text="Save" Click=@SaveFile></RadzenButton>
            }
            else
            {
                <RadzenButton Text="Create" Click=@CreateFile></RadzenButton>
            }
            <RadzenButton Click="@ClearSelection" Text="Clear Selection" />
            @if (SelectedFile?.Any() == true)
            {
                <div class="noselect" style="margin-left: 16px">
                    Selected Employee: @SelectedFile[0].Name @SelectedFile[0].LastWriteTime
                </div>
            }
        </RadzenStack>
         <div class="noselect">
            <RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="5"
                            AllowSorting="true" Data="@files" TItem="System.IO.FileInfo" ColumnWidth="200px"
                            SelectionMode="DataGridSelectionMode.Single" @bind-Value=SelectedFile>
                <Columns>
                    <RadzenDataGridColumn TItem="System.IO.FileInfo" Property="Name" Title="Name" />
                    <RadzenDataGridColumn TItem="System.IO.FileInfo" Property="LastWriteTime" Title="LastWriteTime" />
                </Columns>
            </RadzenDataGrid>
         </div>
    </RadzenColumn>
</RadzenRow>


@code {
    private IEnumerable<System.IO.FileInfo> files;
    private IList<System.IO.FileInfo> _selectedFile;
    private IList<System.IO.FileInfo> SelectedFile
    {
        get
        {
            return _selectedFile;
        }
        set
        {
            _selectedFile = value;
            if (value is null) return;
            OnChangeFile(value[0].Name);
        }

    }

    void ClearSelection()
    {
        SelectedFile = null;
        isOpened = false;
        isChanged = false;
        content = "";
    }

    protected override async Task OnInitializedAsync()
    {
        files = new DirectoryInfo(AppSettings.BasePath).GetFiles();

        var user = await AuthService.GetCurrentUser();
        FileManager.SetTemplateToFileName(user.Name);
    }

    private string content = "";
    private bool isOpened = false;
    private bool isChanged = false;

    private async Task SaveFile()
    {
        try
        {
            await FileManager.Save(content);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }
        isChanged = false;
        NotificationService.Notify(saveFileMsg);
    }

    private async Task CreateFile()
    {
        try
        {
            await FileManager.CreateFile(content);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }
        isChanged = false;
        isOpened = true;

        files = new DirectoryInfo(AppSettings.BasePath).GetFiles();
        NotificationService.Notify(createdFileMsg);
    }

    private async Task OnChangeFile(string fileName)
    {
        try
        {
            content = await FileManager.Change(fileName);
        }
        catch (Exception ex)
        {
            NotificateError(ex);
            return;
        }

        isChanged = false;
        isOpened = true;
        NotificationService.Notify(openedFileMsg);
        StateHasChanged();
    }

    private void NotificateError(Exception ex)
    {
        NotificationService.Notify(
        new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Erorr",
                Detail = ex.Message,
                Duration = 9000
            });
    }

    private NotificationMessage saveFileMsg => new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
            Detail = $"File is saved {FileManager.CurrentFileName}",
        Duration = 7000
    };

    private NotificationMessage createdFileMsg => new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
        Detail = $"File was created {FileManager.CurrentFileName}",
        Duration = 7000
    };

    private NotificationMessage openedFileMsg => new()
    {
        Severity = NotificationSeverity.Success,
        Summary = "Success",
        Detail = $"File was opened {FileManager.CurrentFileName}",
        Duration = 3400
    };
}
